p: Project = input;

# for outputting method pair information
out: output collection of string;

# for outputting aggregate values like number of method pairs
stat: output sum[string] of int;


########################################
### Declarations ###
########################################

# maps the declaration name to its methods
effects: map[string] of string;

# maps the declaration to its superclass name
supers: map[string] of string;

#
# Format:
# [decl name] =
# methodName:(!n or !y calls super method):synchronization kind:
#     Arg,Type,Names:(!n or !y is abstract method)#method2Name
#

# when true, outputs places that seem to have superclass cycles
OUTPUT_SUPER_CYCLES := false;

INVALID_STR: string = "!INVALID!";
HAS_DUPES_STR: string = "!DUPLICATED!";

MDX_NAME: int = 0;
MDX_ARGTYPESTR: int = 1;
MDX_PRIMARY_MODIFIER: int = 2;
MDX_SYNC: int = 3;
MDX_SYNCKIND: int = 4;

MOD_ABSTRACT: string = "A";
MOD_PRIVATE:  string = "P";
MOD_STATIC:   string = "S";
MOD_CTOR:     string = "C";
MOD_OTHER:    string = "O";


########################################
### Utility functions ###
########################################
safeSplit := function(str: string, reg: string) : array of string {
	temp: array of string;

	if (str == "") # empty string, empty list
		return new(temp, 0, INVALID_STR);

	return splitall(str, reg);
};

mergeStrArraySet :=
	function(a1: array of string, a2: array of string):	array of string {

	strMap: map[string] of bool;

	foreach(i: int; def(a1[i])) {
		strMap[a1[i]] = true;
	}
	foreach(i: int; def(a2[i])) {
		strMap[a2[i]] = true;
	}

	return keys(strMap);
};

# assume each array has no duplicates
isEq := function(ar1: array of string, ar2: array of string): bool {
	if (len(ar1) != len(ar2)) {
		return false;
	}

	foreach(i: int; def(ar1[i])) {
		found: bool = false;
		foreach(j: int; def(ar2[j])) {
			if (ar1[i] == ar2[j]) {
				found = true;
				break;
			}
		}

		if (!found) {
			return false;
		}
	}

	return true;
};

toList := function(arr: array of string): string {
	outStr: string = "";
	first: bool = true;

	foreach(i: int; def(arr[i])) {
		if (first) {
			first = false;
			outStr = outStr + arr[i];
		} else {
			outStr = outStr + "," + arr[i];
		}
	}

	if (outStr == "") {
		outStr = ",";
	}

	return outStr;
};

isConstructor := function (method: Method) : bool {
	return method.name == "<init>";
};

isStatic := function (method: Method) : bool {
	foreach(i: int; def(method.modifiers[i])) {
		if (method.modifiers[i].kind == ModifierKind.STATIC) {
			return true;
		}
	}
	return false;
};

isAbstract := function(method: Method): bool {
	foreach(i: int; def(method.modifiers[i])) {
		if (method.modifiers[i].kind == ModifierKind.ABSTRACT) {
			return true;
		}
	}
	return false;
};

isPrivate := function(method: Method): bool {
	foreach(i: int; def(method.modifiers[i])) {
		mod := method.modifiers[i];
		if (mod.kind == ModifierKind.VISIBILITY && mod.visibility == Visibility.PRIVATE) {
			return true;
		}
	}
	return false;
};

stripToTypeName := function(theType: string) : string {
	loc := strrfind(".", theType); # note: the double r is intentional
	if (loc != -1) {
		return substring(theType, loc + 1); # +1 to ignore the dot
	}
	return theType;
};

fileIsFilteredOut := function(root: ASTRoot) : bool {
	found := false;
	visit(root, visitor {
		before _ -> if (found) stop;
		before node: Modifier ->
			if (node.kind == ModifierKind.ANNOTATION && node.annotation_name == "Test")
				found = true;
	});
	return found;
};


########################################
### New getsnapshot() ###
########################################
# getsnapshot - medium precision version
# note: does not check AST hashes, and takes ~35mins on big dataset
getsnapshot_mp := function(cr: CodeRepository, t: time)
	: array of ChangedFile {

	filter := "SOURCE_JAVA_JLS";
	snapshot: map[string] of ChangedFile;
	blacklist: set of string;

	visit(cr, visitor {
		before node: Revision -> {
			if (node.commit_date > t) stop;

			fKeys: map[ChangedFile] of string;
			rFinal: map[string] of ChangedFile;

			# apply filters and generate keys / hashes
			foreach (i:int; def(node.files[i])) {
				file := node.files[i];
				if (!iskind(filter, file.kind)) continue;

				ast: ASTRoot = getast(file);
				if (len(ast.namespaces) != 1) continue;

				parts := splitall(file.name, "/");
				fileName := parts[len(parts) - 1];

				fKeys[file] = ast.namespaces[0].name + "." + fileName;
			}

			# process each file
			fList := keys(fKeys);
			foreach (i: int; def(fList[i])) {
				curr := fList[i];
				if (def(rFinal[fKeys[curr]])) {
					add(blacklist, fKeys[curr]);
				} else {
					rFinal[fKeys[curr]] = curr;
				}
			}

			kList := keys(rFinal);
			foreach(i: int; def(kList[i])) {
				currKey := kList[i];
				if (rFinal[currKey].change == ChangeKind.DELETED) {
					remove(snapshot, currKey);
				} else {
					snapshot[currKey] = rFinal[currKey];
				}
			}
		}
	});

	finalSnap: map[string] of ChangedFile;
	finalKeys := keys(snapshot);
	foreach (i:int; def(finalKeys[i])) {
		k := finalKeys[i];
		if (!contains(blacklist, k)) # not blacklisted
			finalSnap[k] = snapshot[k];
	}
	return values(finalSnap);
};

########################################
### Resolution code ###
########################################
resolvOut: output sum[string] of int;

declImp: map[string] of string; # [decl] = {list of imports, # separated}
declPkg: map[string] of string; # [decl] = {package}
declNme: map[string] of string; # [decl] = {decl.namee}

IMPORT_DELIM := "#";

resolve := function(decl: string, ctx: string) : string {
	if (!def(declPkg[ctx])) {
		resolvOut["BAD_CONTEXT"] << 1;
		return INVALID_STR; # no such context
	}

	# See if it's an inner class
	inKey := ctx + "." + decl;
	inName := declPkg[inKey];
	if (def(inName) && inName != HAS_DUPES_STR) {
		resolvOut["INNER_CLASS"] << 1;
		return inKey;
	}

	# See if it's an outer class
	oParts := safeSplit(ctx, "\\.");
	oPkgParts := safeSplit(declPkg[ctx], "\\.");
	oLB := len(oPkgParts); oUB := len(oParts) - 1; # oLB inclusive, oUB exclusive
	for (i: int = oLB; i < oUB; i++) {
		if (oParts[i] == decl) { # outer class, so try to reconstruct the key
			outKey := declPkg[ctx];
			for (k: int = oLB; k <= i; k++) {
				outKey = outKey + "." + oParts[k];
			}
			outName := declPkg[outKey];
			if (def(outName) && outName != HAS_DUPES_STR) {
				resolvOut["OUTER_CLASS"] << 1;
				return outKey;
			} else {
				resolvOut["OUTER_CLASS_FAILED_TO_RESOLVE"] << 1;
				return INVALID_STR;
			}
		}
	}

	# set up to look at imports
	imps := safeSplit(declImp[ctx], IMPORT_DELIM);
	parts: array of string; # declaring it here prevents compiler breaking

	# Fully qualified imports
	foreach(i:int; def(imps[i])) {
		if (strfind("*", imps[i]) != -1) continue;

		parts = safeSplit(imps[i], "\\.");
		if (parts[len(parts) - 1] == decl) {
			if (def(declPkg[imps[i]]) && declPkg[imps[i]] != HAS_DUPES_STR) {
				resolvOut["NORM_IMPORT"] << 1;
				return imps[i];
			} else {
				resolvOut["NORM_IMPORT_FAILED_TO_RESOLVE"] << 1;
				return INVALID_STR;
			}
		}
	}

	# Look for matches in the same package
	pkgKey := declPkg[ctx] + "." + decl;
	pkgName := declPkg[pkgKey];
	if (def(pkgName) && pkgName != HAS_DUPES_STR) {
		resolvOut["SAME_PACKAGE"] << 1;
		return pkgKey;
	}

	# Finally look at wildcard imports
	foreach(i:int; def(imps[i])) {
		if (strfind("*", imps[i]) == -1) continue;

		# strreplace appears to cause an error in an unknown situation
		# working around that here
		#newImp := strreplace(imps[i], "*", decl, false);
		newImp := "";
		parts = safeSplit(imps[i], "\\.");
		foreach (x: int; def(parts[x])) {
			toAdd := "";

			if (parts[x] == "*") toAdd = decl;
			else toAdd = parts[x];

			if (newImp == "") newImp = toAdd;
			else newImp = newImp + "." + toAdd;
		}

		newImpPkg := declPkg[newImp];
		if (def(newImpPkg) && newImpPkg != HAS_DUPES_STR) {
			resolvOut["STAR_IMPORT"] << 1;
			return newImp;
		}
	}

	resolvOut["NO_RESOLUTION"] << 1;
	return INVALID_STR;
};

# returns the declaration key
# outers must be empty or in the format of ".out1.out2"
preprocessDecl := function(decl: Declaration, root: ASTRoot, outers: string)
	: string {

	if (len(root.namespaces) != 1) {
		resolvOut["BAD_NAMESPACE"] << 1;
		return INVALID_STR;
	}

	key: string = root.namespaces[0].name + outers + "." + decl.name;

	if (def(declPkg[key])) {
		if (declPkg[key] != HAS_DUPES_STR) {
			resolvOut["DUPLICATED"] << 2;
			declImp[key] = HAS_DUPES_STR;
			declPkg[key] = HAS_DUPES_STR;
			declNme[key] = HAS_DUPES_STR;
		} else {
			resolvOut["DUPLICATED"] << 1;
		}
		return INVALID_STR;
	}

	imps := "";
	foreach(i:int; def(root.imports[i])) {
		if (imps == "") imps = root.imports[i];
		else imps = imps + IMPORT_DELIM + root.imports[i];
	}
	declImp[key] = imps;
	declPkg[key] = root.namespaces[0].name;
	declNme[key] = decl.name;

	return key;
};


########################################
### Synchronization functions ###
########################################
SYNC_ACQUIRE: string = "!ACQUIRE";
SYNC_RELEASE: string = "!RELEASE";
SYNC_BOTH   : string = "!BOTH";
SYNC_NONE   : string = "!NONE";

SYNC_KIND_LOCK    : string = "!LOCK";
SYNC_KIND_BLOCK   : string = "!BLOCK";
SYNC_KIND_MODIFIER: string = "!MODIFIER";

SYNC_HAS_LOCK_OBJ: int = 0;
SYNC_HAS_SYNC_BLOCK: int = 1;

lock_get: map[string] of string;
lock_acquire: map[string] of string;
lock_release: map[string] of string;

debugSyncEffect: output sum[string] of int;

########################################
lock_get["ReentrantReadWriteLock"] = "readLock#writeLock";

########################################
lock_acquire["Lock"] = "lock#lockInterruptibly#tryLock";
lock_acquire["ReentrantLock"] = "lock#lockInterruptibly#tryLock";
lock_acquire["ReadLock"] = "lock#lockInterruptibly#tryLock";
lock_acquire["WriteLock"] = "lock#lockInterruptibly#tryLock";
lock_acquire["Semaphore"] = "acquire#acquireUninterruptibly#tryAcquire";

########################################
lock_release["Lock"] = "unlock";
lock_release["ReadLock"] = "unlock";
lock_release["WriteLock"] = "unlock";
lock_release["ReentrantLock"] = "unlock";
lock_release["Semaphore"] = "release";

########################################
lock_isInList := function (target: string, list: string): bool {
	arr := safeSplit(list, "#");
	foreach(i: int; def(arr[i])) {
		if (arr[i] == target) return true;
	}
	return false;
};

lock_getActualEffect := function(varType: string, method: string) : string {
	list: string = INVALID_STR;

	if (def(lock_acquire[varType])) {
		list = lock_acquire[varType];
		if (lock_isInList(method, list)) return SYNC_ACQUIRE;
	}

	if (def(lock_release[varType])) {
		list = lock_release[varType];
		if (lock_isInList(method, list)) return SYNC_RELEASE;
	}

	return SYNC_NONE;
};

lock_getTypeFromVARACCESS := function(source: Expression,
	declVars: map[string] of string,
	methodVars: map[string] of string) : string
{
	isThis: bool = false;

	if (len(source.expressions) == 1) {
		meta := source.expressions[0];
		if (meta.kind == ExpressionKind.LITERAL
			&& meta.literal == "this") isThis = true;
		else if (meta.kind == ExpressionKind.LITERAL ||
			     meta.kind == ExpressionKind.VARACCESS ||
			     meta.kind == ExpressionKind.METHODCALL)
		{
			return INVALID_STR; # don't know this source of our expression
		}
	}

	# full code string is the following expression:
	# (isThis ? "this." : "") + source.variable + "." + node.method

	varType: string = INVALID_STR;
	if (isThis) {
		if (def(declVars[source.variable])) {
			varType = declVars[source.variable];
		}
	} else if (def(methodVars[source.variable])){
		varType = methodVars[source.variable];
	} else if (def(declVars[source.variable])) {
		varType = declVars[source.variable];
	}

	return varType;
};

lock_processExp := function(node: Expression,
	declVars: map[string] of string,
	methodVars: map[string] of string) : string
{
	source: Expression = node.expressions[0];
	varType: string = INVALID_STR;

	if (source.kind == ExpressionKind.VARACCESS) {
		varType = lock_getTypeFromVARACCESS(source, declVars, methodVars);

		if (varType == INVALID_STR)
			return SYNC_NONE;
		else {
			debugSyncEffect["SYNC_LOCK_VARACCESS"] << 1;
			return lock_getActualEffect(varType, node.method);
		}

	} else if (source.kind == ExpressionKind.METHODCALL && len(source.expressions) == 1) {
		# Maybe a ReentrantReadWriteLock
		sourceSource: Expression = node.expressions[0];

		if (sourceSource.kind == ExpressionKind.VARACCESS) {
			varType = lock_getTypeFromVARACCESS(sourceSource, declVars, methodVars);

			if (def(lock_get[varType]) && lock_isInList(source.method, lock_get[varType])) {

				# Assume 'Lock' interface here
				debugSyncEffect["SYNC_LOCK_METHODCALL"] << 1;
				return lock_getActualEffect("Lock", node.method);
			}
		}
	}

	return SYNC_NONE;
};

getSynchronizationType := function(method: Method,
	decl: Declaration,
	lockType: array of bool) : string
{
	hasAcquire: bool = false;
	hasRelease: bool = false;

	lockType[SYNC_HAS_LOCK_OBJ] = false;  # this returns the value to the callee
	lockType[SYNC_HAS_SYNC_BLOCK] = false;

	declVars: map[string] of string; # [name] = type
	methodVars: map[string] of string; # [name] = type;

	foreach(i: int; def(decl.fields[i])) {
		dVar: Variable = decl.fields[i];
		declVars[dVar.name] = stripToTypeName(dVar.variable_type.name);
	}

	foreach(i:int; def(method.modifiers[i]))
		if (method.modifiers[i].kind == ModifierKind.SYNCHRONIZED) {
			hasAcquire = true;
			hasRelease = true;
		}

	visit(method, visitor {
		before node: Declaration -> stop;
		before node: Statement ->
			if (node.kind == StatementKind.SYNCHRONIZED) {
				hasAcquire = true;
				hasRelease = true;
				lockType[SYNC_HAS_SYNC_BLOCK] = true;
			}
		before node: Expression -> {
			if (node.kind == ExpressionKind.METHODCALL && len(node.expressions) == 1) {
				result := lock_processExp(node, declVars, methodVars);
				if (result == SYNC_ACQUIRE) {
					hasAcquire = true;
					lockType[SYNC_HAS_LOCK_OBJ] = true;
					debugSyncEffect["SYNC_SINGLE_ACQUIRE"] << 1;
				} else if (result == SYNC_RELEASE) {
					hasRelease = true;
					lockType[SYNC_HAS_LOCK_OBJ] = true;
					debugSyncEffect["SYNC_SINGLE_RELEASE"] << 1;
				}
			}
			else if (node.kind == ExpressionKind.VARDECL) {
				foreach(i:int; def(node.variable_decls[i])) {
					lvar: Variable = node.variable_decls[i];
					methodVars[lvar.name] = stripToTypeName(lvar.variable_type.name);
				}
			}
		}
	});

	if (hasAcquire && hasRelease) return SYNC_BOTH;
	else if (hasAcquire)          return SYNC_ACQUIRE;
	else if (hasRelease)          return SYNC_RELEASE;
	return SYNC_NONE;
};


########################################
### Effect analysis functions ###
########################################
processOneMethod := function(method: Method, decl: Declaration, key: string) {
	finalStr: string = method.name;

	# argument types
	argStr: string = "";
	foreach(i: int; def(method.arguments[i])) {
		tName: string = method.arguments[i].variable_type.name;
		if (argStr == "") {
			argStr = tName;
		} else {
			argStr = format("%s,%s", argStr, tName);
		}
	}
	if (argStr == "")
		argStr = ",";
	finalStr = format("%s:%s", finalStr, argStr);

	# add the primary access modifier with the following precedence
	accessModifier: string = MOD_OTHER;
	if (isAbstract(method)) {
		accessModifier = MOD_ABSTRACT;
	} else if (isPrivate(method)) {
		accessModifier = MOD_PRIVATE;
	} else if (isStatic(method)) {
		accessModifier = MOD_STATIC;
	} else if (isConstructor(method)) {
		accessModifier = MOD_CTOR;
	}
	finalStr = format("%s:%s", finalStr, accessModifier);

	# note synchronization type
	lockType: array of bool;
	lockType = new(lockType, 2, false);
	syncType: string = getSynchronizationType(method, decl, lockType);
	finalStr = finalStr + ":" + syncType;

	# has lock object, block, or modifier
	if (lockType[SYNC_HAS_LOCK_OBJ]) {
		finalStr = format("%s:%s", finalStr, SYNC_KIND_LOCK);
	} else if (lockType[SYNC_HAS_SYNC_BLOCK]) {
		finalStr = format("%s:%s", finalStr, SYNC_KIND_BLOCK);
	} else {
		finalStr = format("%s:%s", finalStr, SYNC_KIND_MODIFIER);
	}

	# add the method for later processing after intra-project deduplication
	if (effects[key] == "") {
		effects[key] = finalStr;
	} else {
		effects[key] = format("%s#%s", effects[key], finalStr);
	}
};

processDecl := function(decl: Declaration, key: string) {
	# cache superclass if any
	supers[key] = INVALID_STR;
	foreach(i: int; def(decl.parents[i])) {
		if (decl.parents[i].kind == TypeKind.CLASS) {
			supers[key] = decl.parents[i].name;
			break;
		}
	}

	# process the methods
	effects[key] = "";
	foreach(i: int; def(decl.methods[i])) {
		processOneMethod(decl.methods[i], decl, key);
	}
};

# returns the overridden method info string if and only if it
# 1. exists
# 2. is not abstract, private, static, nor a constructor
# otherwise returns INVALID_STR
getOverridden := function(method: array of string, decl: string): string {
	argTypes: string = method[MDX_ARGTYPESTR];
	currDeclKey: string = resolve(supers[decl], decl);
	prevSeen: set of string;
	add(prevSeen, decl);

	while (currDeclKey != INVALID_STR
		&& !contains(prevSeen, currDeclKey)) {

		add(prevSeen, currDeclKey);

		if (effects[currDeclKey] == "") {
			# no methods to examine, go to next
			currDeclKey = resolve(supers[currDeclKey], currDeclKey);
			continue;
		}

		# for all methods
		methodList: array of string = splitall(effects[currDeclKey], "#");
		foreach(i: int; def(methodList[i])) {
			tempDat: array of string = splitall(methodList[i], ":");
			tempMethodName: string = tempDat[MDX_NAME];
			tempArgTypes: string = tempDat[MDX_ARGTYPESTR];
			tempIsValidForPair: bool = tempDat[MDX_PRIMARY_MODIFIER] == MOD_OTHER;

			# if method name and arguments match then return
			if (tempMethodName == method[MDX_NAME] && tempArgTypes == argTypes) {
				# overrides an abstract or similar method, so return no available overridden impl
				if (!tempIsValidForPair) {
					return INVALID_STR;
				} else {
					return methodList[i];
				}
			}
		}

		# no matching method, go to next
		currDeclKey = resolve(supers[currDeclKey], currDeclKey);
	}

	if (OUTPUT_SUPER_CYCLES &&
		currDeclKey != INVALID_STR && contains(prevSeen, currDeclKey)) {

		out << "ERROR: Superclass cycle " + p.name + "#" + method[MDX_NAME]
		        + "#" + decl + "#" + currDeclKey;
	}

	return INVALID_STR;
};

outputMethodResults := function(decl: string, mInfo: array of string) {
	# method is abstract, static, ctor, or private then skip it
	if (mInfo[MDX_PRIMARY_MODIFIER] != MOD_OTHER) {
		return;
	}

	superInfoFull: string = getOverridden(mInfo, decl);
	superInfo: array of string = splitall(superInfoFull, ":");

	# no valid supermethod
	if (superInfoFull == INVALID_STR) {
		return;
	}

	stat["METHOD_PAIR_COUNT"] << 1;

	# no overriden abstract methods or pairs w/o any explicit effects
	if (mInfo[MDX_SYNC] == SYNC_NONE && superInfo[MDX_SYNC] == SYNC_NONE) {
		return;
	}

	stat["METHOD_PAIR_WITH_EFFECT_COUNTER"] << 1;

	superEffectLen: int = 0;
	infoEffectLen: int = 0;

	if (superInfo[MDX_SYNC] == SYNC_NONE) {}
	else if (superInfo[MDX_SYNC] == SYNC_BOTH) superEffectLen = 2;
	else superEffectLen = 1;

	if (mInfo[MDX_SYNC] == SYNC_NONE) {}
	else if (mInfo[MDX_SYNC] == SYNC_BOTH) infoEffectLen = 2;
	else infoEffectLen = 1;

	diffInfo: string = "!y";
	if (mInfo[MDX_SYNC] == superInfo[MDX_SYNC]) {
		diffInfo = "!n";
	} else if (infoEffectLen > superEffectLen) {
		diffInfo = "!subhasmore";
	} else if (infoEffectLen < superEffectLen) {
		diffInfo = "!sprhasmore";
	}

	syncKind: string = "!hasModifier";
	if (mInfo[MDX_SYNCKIND] == SYNC_KIND_LOCK || superInfo[MDX_SYNCKIND] == SYNC_KIND_LOCK)
		syncKind = "!hasLock";
	else if (mInfo[MDX_SYNCKIND] == SYNC_KIND_BLOCK || superInfo[MDX_SYNCKIND] == SYNC_KIND_BLOCK)
		syncKind = "!hasBlock";

	out << p.name + "#"
	     + mInfo[MDX_NAME] + "#"
	     + declNme[decl] + "#"
	     + superInfo[MDX_SYNC] + "#"
	     + mInfo[MDX_SYNC] + "#"
	     + diffInfo + "#"
	     + syncKind;
};

outputMethodStats := function(mInfo: array of string) {
	stat["METHOD_COUNT"] << 1;

	if (mInfo[MDX_PRIMARY_MODIFIER] == MOD_ABSTRACT) {
		return;
	}

	syncType: string = mInfo[MDX_SYNC];
	if (mInfo[MDX_SYNCKIND] == SYNC_KIND_LOCK) {
		stat["SYNC=" + syncType + ";LOCK_OBJ"] << 1;
		stat["SYNC_LOCK_OBJ_TOTAL"] << 1;
	} else if (mInfo[MDX_SYNCKIND] == SYNC_KIND_BLOCK) {
		stat["SYNC=" + syncType + ";SYNC_BLOCK"] << 1;
		stat["SYNC_BLOCK_TOTAL"] << 1;
	} else {
		stat["SYNC=" + syncType + ";SYNC_MODIFIER_ONLY"] << 1;
		stat["SYNC_MODIFIER_ONLY_TOTAL"] << 1;
	}

	stat["NON_ABSTRACT_METHOD_COUNT"] << 1;
};

outputResults := function() {
	# also same for 'effects'
	types: array of string = keys(declPkg);

	foreach(i: int; def(types[i])) {
		curr: string = types[i];

		# if type is not duplicated, output results for each method
		if (declPkg[curr] != HAS_DUPES_STR) {
			stat["CLASS_COUNT"] << 1;

			methods: array of string = safeSplit(effects[curr], "#");
			foreach(j: int; def(methods[j])) {
				mInfo: array of string = splitall(methods[j], ":");
				outputMethodStats(mInfo);
				outputMethodResults(curr, mInfo);
			}
		}
	}
};


########################################
### Resolution startup ###
########################################
produce := function(snapshot: array of ChangedFile, filterOutList: array of bool) {
	file: ChangedFile;

	numOut: int = 0; # current size of outers
	OUTER_LEN: int = 3; # hard limit of "outer1.outer2.class"
	outers: array of string;
	outers = new(outers, OUTER_LEN, "");

	prodVisit := visitor {
		before decl: Declaration -> {
			if (decl.kind == TypeKind.CLASS) {
				resolvOut["DECLARATION"] << 1;

				currOut: string = "";
				for(i: int = 0; i < numOut && i < OUTER_LEN; i++)
					currOut = currOut + "." + outers[i];

				key: string = preprocessDecl(decl, getast(file), currOut);
				if (key != INVALID_STR) processDecl(decl, key);
			}

			numOut++;
			if (numOut <= OUTER_LEN) {
				outers[numOut - 1] = decl.name;
			}
		}

		after node: Declaration -> numOut--;

		# don't look at declarations in a method
		before node: Method -> stop;
	};
	foreach(i: int; def(snapshot[i])) {
		file = snapshot[i];

		if (filterOutList[i])
			continue;

		visit(snapshot[i], prodVisit);

		if (numOut != 0) {
			resolvOut["OUTER_NONZERO (bug?)"] << 1;
			numOut = 0;
		}
	}
};


########################################
### Startup ###
########################################
countNodes := function (snapshot: array of ChangedFile) {
	currentNodeCountAST: int = 0;
	counterAST := visitor {
		before _ -> currentNodeCountAST++;
	};
	foreach(i:int; def(snapshot[i])) {
		visit(snapshot[i], counterAST);
	}
	stat["PROJECT_LATEST_TOTAL_AST_NODES"] << currentNodeCountAST;
};

# All repositories are Java code repositories. <=1 per project on GitHub
revisionVisitor := visitor {
	before node: CodeRepository -> {
		stat["CODE_REPOSITORY_COUNT"] << 1;

		clear(declImp);
		clear(declPkg);
		clear(declNme);

		clear(effects);
		clear(supers);

		#clear(statics);

		snapshot := getsnapshot_mp(node, now());
		filterOutList: array of bool;
		filterOutList = new(filterOutList, len(snapshot), false);

		stat["CONSIDERED_SOURCE_FILES"] << len(snapshot);

		# set up statics for throws analysis, check for JUnit prescence
		foreach (i: int; def(snapshot[i])) {
			root := getast(snapshot[i]);

			if (fileIsFilteredOut(root))
				filterOutList[i] = true;
			#else
			#	visit(root, staticMethodVisitor);
		}

		# set up rest of the structures (for resolv and app)
		produce(snapshot, filterOutList);

		# count number of AST nodes
		countNodes(snapshot);
	}
};

visit(p, revisionVisitor);
outputResults();