p: Project = input;

# for outputting method pair information
out: output collection of string;

# for outputting aggregate values like number of method pairs
stat: output sum[string] of int;


########################################
### Declarations ###
########################################

# maps the declaration name to its methods
effects: map[string] of string;

# maps the declaration to its superclass name
supers: map[string] of string;

# (OUTDATED)
# Format:
# [decl name] =
# methodName:(!n or !y calls super method):Exceptions,That,Are,Thrown:
#     Arg,Type,Names:(!n or !y is abstract method)#nextMethodName
#

# when true, outputs places that seem to have superclass cycles
OUTPUT_SUPER_CYCLES := false;

OUTPUT_PAIR_INFO := true;

INVALID_STR: string = "!INVALID!";
HAS_DUPES_STR: string = "!DUPLICATED!";

MDX_NAME: int = 0;
MDX_ARGTYPESTR: int = 1;
MDX_PRIMARY_MODIFIER: int = 2;
MDX_IO_EFFECT: int = 3;
MDX_IOKIND: int = 4;
MDX_IO_OUT_TYPES: int = 5;

MOD_ABSTRACT: string = "A";
MOD_PRIVATE:  string = "P";
MOD_STATIC:   string = "S";
MOD_CTOR:     string = "C";
MOD_OTHER:    string = "O";


########################################
### Utility functions ###
########################################
safeSplit := function(str: string, reg: string) : array of string {
	temp: array of string;

	if (str == "") # empty string, empty list
		return new(temp, 0, INVALID_STR);

	return splitall(str, reg);
};

mergeStrArraySet :=
	function(a1: array of string, a2: array of string):	array of string {

	strMap: map[string] of bool;

	foreach(i: int; def(a1[i])) {
		strMap[a1[i]] = true;
	}
	foreach(i: int; def(a2[i])) {
		strMap[a2[i]] = true;
	}

	return keys(strMap);
};

# assume each array has no duplicates
isEq := function(ar1: array of string, ar2: array of string): bool {
	if (len(ar1) != len(ar2)) {
		return false;
	}

	foreach(i: int; def(ar1[i])) {
		found: bool = false;
		foreach(j: int; def(ar2[j])) {
			if (ar1[i] == ar2[j]) {
				found = true;
				break;
			}
		}

		if (!found) {
			return false;
		}
	}

	return true;
};

toList := function(arr: array of string): string {
	outStr: string = "";
	first: bool = true;

	foreach(i: int; def(arr[i])) {
		if (first) {
			first = false;
			outStr = outStr + arr[i];
		} else {
			outStr = outStr + "," + arr[i];
		}
	}

	if (outStr == "") {
		outStr = ",";
	}

	return outStr;
};

isConstructor := function (method: Method) : bool {
	return method.name == "<init>";
};

isStatic := function (method: Method) : bool {
	foreach(i: int; def(method.modifiers[i])) {
		if (method.modifiers[i].kind == ModifierKind.STATIC) {
			return true;
		}
	}
	return false;
};

isAbstract := function(method: Method): bool {
	foreach(i: int; def(method.modifiers[i])) {
		if (method.modifiers[i].kind == ModifierKind.ABSTRACT) {
			return true;
		}
	}
	return false;
};

isPrivate := function(method: Method): bool {
	foreach(i: int; def(method.modifiers[i])) {
		mod := method.modifiers[i];
		if (mod.kind == ModifierKind.VISIBILITY && mod.visibility == Visibility.PRIVATE) {
			return true;
		}
	}
	return false;
};

stripToTypeName := function(theType: string) : string {
	loc := strrfind(".", theType); # note: the double r is intentional
	if (loc != -1) {
		return substring(theType, loc + 1); # +1 to ignore the dot
	}
	return theType;
};

fileIsFilteredOut := function(root: ASTRoot) : bool {
	found := false;
	visit(root, visitor {
		before _ -> if (found) stop;
		before node: Modifier ->
			if (node.kind == ModifierKind.ANNOTATION && node.annotation_name == "Test")
				found = true;
	});
	return found;
};


########################################
### New getsnapshot() ###
########################################
# getsnapshot - medium precision version
# note: does not check AST hashes, and takes ~35mins on big dataset
getsnapshot_mp := function(cr: CodeRepository, t: time)
	: array of ChangedFile {

	filter := "SOURCE_JAVA_JLS";
	snapshot: map[string] of ChangedFile;
	blacklist: set of string;

	visit(cr, visitor {
		before node: Revision -> {
			if (node.commit_date > t) stop;

			fKeys: map[ChangedFile] of string;
			rFinal: map[string] of ChangedFile;

			# apply filters and generate keys / hashes
			foreach (i:int; def(node.files[i])) {
				file := node.files[i];
				if (!iskind(filter, file.kind)) continue;

				ast: ASTRoot = getast(file);
				if (len(ast.namespaces) != 1) continue;

				parts := splitall(file.name, "/");
				fileName := parts[len(parts) - 1];

				fKeys[file] = ast.namespaces[0].name + "." + fileName;
			}

			# process each file
			fList := keys(fKeys);
			foreach (i: int; def(fList[i])) {
				curr := fList[i];
				if (def(rFinal[fKeys[curr]])) {
					add(blacklist, fKeys[curr]);
				} else {
					rFinal[fKeys[curr]] = curr;
				}
			}

			kList := keys(rFinal);
			foreach(i: int; def(kList[i])) {
				currKey := kList[i];
				if (rFinal[currKey].change == ChangeKind.DELETED) {
					remove(snapshot, currKey);
				} else {
					snapshot[currKey] = rFinal[currKey];
				}
			}
		}
	});

	finalSnap: map[string] of ChangedFile;
	finalKeys := keys(snapshot);
	foreach (i:int; def(finalKeys[i])) {
		k := finalKeys[i];
		if (!contains(blacklist, k)) # not blacklisted
			finalSnap[k] = snapshot[k];
	}
	return values(finalSnap);
};


########################################
### Resolution code ###
########################################
resolvOut: output sum[string] of int;

declImp: map[string] of string; # [decl] = {list of imports, # separated}
declPkg: map[string] of string; # [decl] = {package}
declNme: map[string] of string; # [decl] = {decl.namee}

IMPORT_DELIM := "#";

resolve := function(decl: string, ctx: string) : string {
	if (!def(declPkg[ctx])) {
		resolvOut["BAD_CONTEXT"] << 1;
		return INVALID_STR; # no such context
	}

	# See if it's an inner class
	inKey := ctx + "." + decl;
	inName := declPkg[inKey];
	if (def(inName) && inName != HAS_DUPES_STR) {
		resolvOut["INNER_CLASS"] << 1;
		return inKey;
	}

	# See if it's an outer class
	oParts := safeSplit(ctx, "\\.");
	oPkgParts := safeSplit(declPkg[ctx], "\\.");
	oLB := len(oPkgParts); oUB := len(oParts) - 1; # oLB inclusive, oUB exclusive
	for (i: int = oLB; i < oUB; i++) {
		if (oParts[i] == decl) { # outer class, so try to reconstruct the key
			outKey := declPkg[ctx];
			for (k: int = oLB; k <= i; k++) {
				outKey = outKey + "." + oParts[k];
			}
			outName := declPkg[outKey];
			if (def(outName) && outName != HAS_DUPES_STR) {
				resolvOut["OUTER_CLASS"] << 1;
				return outKey;
			} else {
				resolvOut["OUTER_CLASS_FAILED_TO_RESOLVE"] << 1;
				return INVALID_STR;
			}
		}
	}

	# set up to look at imports
	imps := safeSplit(declImp[ctx], IMPORT_DELIM);
	parts: array of string; # declaring it here prevents compiler breaking

	# Fully qualified imports
	foreach(i:int; def(imps[i])) {
		if (strfind("*", imps[i]) != -1) continue;

		parts = safeSplit(imps[i], "\\.");
		if (parts[len(parts) - 1] == decl) {
			if (def(declPkg[imps[i]]) && declPkg[imps[i]] != HAS_DUPES_STR) {
				resolvOut["NORM_IMPORT"] << 1;
				return imps[i];
			} else {
				resolvOut["NORM_IMPORT_FAILED_TO_RESOLVE"] << 1;
				return INVALID_STR;
			}
		}
	}

	# Look for matches in the same package
	pkgKey := declPkg[ctx] + "." + decl;
	pkgName := declPkg[pkgKey];
	if (def(pkgName) && pkgName != HAS_DUPES_STR) {
		resolvOut["SAME_PACKAGE"] << 1;
		return pkgKey;
	}

	# Finally look at wildcard imports
	foreach(i:int; def(imps[i])) {
		if (strfind("*", imps[i]) == -1) continue;

		# strreplace appears to cause an error in an unknown situation
		# working around that here
		#newImp := strreplace(imps[i], "*", decl, false);
		newImp := "";
		parts = safeSplit(imps[i], "\\.");
		foreach (x: int; def(parts[x])) {
			toAdd := "";

			if (parts[x] == "*") toAdd = decl;
			else toAdd = parts[x];

			if (newImp == "") newImp = toAdd;
			else newImp = newImp + "." + toAdd;
		}

		newImpPkg := declPkg[newImp];
		if (def(newImpPkg) && newImpPkg != HAS_DUPES_STR) {
			resolvOut["STAR_IMPORT"] << 1;
			return newImp;
		}
	}

	resolvOut["NO_RESOLUTION"] << 1;
	return INVALID_STR;
};

# returns the declaration key
# outers must be empty or in the format of ".out1.out2"
preprocessDecl := function(decl: Declaration, root: ASTRoot, outers: string)
	: string {

	if (len(root.namespaces) != 1) {
		resolvOut["BAD_NAMESPACE"] << 1;
		return INVALID_STR;
	}

	key: string = root.namespaces[0].name + outers + "." + decl.name;

	if (def(declPkg[key])) {
		if (declPkg[key] != HAS_DUPES_STR) {
			resolvOut["DUPLICATED"] << 2;
			declImp[key] = HAS_DUPES_STR;
			declPkg[key] = HAS_DUPES_STR;
			declNme[key] = HAS_DUPES_STR;
		} else {
			resolvOut["DUPLICATED"] << 1;
		}
		return INVALID_STR;
	}

	imps := "";
	foreach(i:int; def(root.imports[i])) {
		if (imps == "") imps = root.imports[i];
		else imps = imps + IMPORT_DELIM + root.imports[i];
	}
	declImp[key] = imps;
	declPkg[key] = root.namespaces[0].name;
	declNme[key] = decl.name;

	return key;
};


########################################
### I/O call analysis functions ###
########################################
IO_IN := "IN";
IO_OUT := "OUT";
IO_BOTH := "BOTH";
IO_NONE := "NONE";

IO_KIND_CONSOLE: string = "!CONSOLE";
IO_KIND_FILE   : string = "!FILE";
IO_KIND_BUS    : string = "!BUS";

IO_HAS_CONSOLE: int = 0;
IO_HAS_FILE: int = 1;
IO_HAS_BUS: int = 2;

# diagnostics / stats that cover all methods not just method pairs
ioOut: output sum[string] of int;
ioInput: output sum[string] of int;
ioOutput: output sum[string] of int;

i_map: map[string] of string;
o_map: map[string] of string;
i_map_static: map[string] of string;
io_kind_map: map[string] of string;

####################
i_map["StreamTokenizer"] = "commentChar#eolIsSignificant#lineno#lowerCaseMode#nextToken#ordinaryChar#ordinaryChars#parseNumbers#pushBack#quoteChar#resetSyntax#slashSlashComments#slashStarComments#toString#whitespaceChars#wordChars";
i_map["PipedReader"] = "read#reset#skip";
i_map["Console"] = "readLine#readPassword";
i_map["ObjectInputStream"] = "defaultReadObject#read#readBoolean#readByte#readChar#readClassDescriptor#readDouble#readFields#readFloat#readFully#readInt#readLine#readLong#readObject#readObjectOverride#readShort#readStreamHeader#readUnshared#readUnsignedByte#readUnsignedShort#readUTF#registerValidation#resolveClass#resolveObject#resolveProxyClass#skipBytes#reset#skip";
i_map["PipedInputStream"] = "read#receive#reset#skip";
i_map["StringReader"] = "read#reset#skip";
i_map["InputStream"] = "read#reset#skip";
i_map["LineNumberInputStream"] = "getLineNumber#read#reset#skip";
i_map["Reader"] = "read#reset#skip";
i_map["FileInputStream"] = "read#reset#skip";
i_map["FilterReader"] = "read#reset#skip";
i_map["BufferedInputStream"] = "read#reset#skip";
i_map["PushbackInputStream"] = "read#reset#skip#unread";
i_map["DataInput"] = "readBoolean#readByte#readChar#readDouble#readFloat#readFully#readInt#readLine#readLong#readShort#readUnsignedByte#readUnsignedShort#readUTF#skipBytes";
i_map["CharArrayReader"] = "read#reset#skip";
i_map["InputStreamReader"] = "read#reset#skip";
i_map["Externalizable"] = "readExternal";
i_map["ByteArrayInputStream"] = "read#reset#skip";
i_map["DataInputStream"] = "read#readBoolean#readByte#readChar#readDouble#readFloat#readFully#readInt#readLine#readLong#readShort#readUnsignedByte#readUnsignedShort#readUTF#skipBytes#reset#skip";
i_map["StringBufferInputStream"] = "read#reset#skip";
i_map["SequenceInputStream"] = "read#reset#skip";
i_map["PushbackReader"] = "read#reset#skip#unread";
i_map["Scanner"] = "findInLine#findWithinHorizon#match#next#nextBigDecimal#nextBigInteger#nextBoolean#nextByte#nextDouble#nextFloat#nextInt#nextLine#nextLong#nextShort#remove#reset#skip";
i_map["LineNumberReader"] = "getLineNumber#read#reset#skip";
i_map["FileReader"] = "read#reset#skip";
i_map["RandomAccessFile"] = "close#getChannel#getFD#getFilePointer#length#read#readBoolean#readByte#readChar#readDouble#readFloat#readFully#readInt#readLine#readLong#readShort#readUnsignedByte#readUnsignedShort#readUTF#seek#skipBytes";
i_map["BufferedReader"] = "read#readLine#reset#skip";
i_map["FilterInputStream"] = "read#reset#skip";
i_map["ObjectInput"] = "read#readObject#readBoolean#readByte#readChar#readDouble#readFloat#readFully#readInt#readLine#readLong#readShort#readUnsignedByte#readUnsignedShort#readUTF#skipBytes#reset#skip";
####################
o_map["FilterWriter"] = "flush#write#append";
o_map["Console"] = "flush#format#printf";
o_map["CharArrayWriter"] = "append#flush#reset#write#writeTo";
o_map["Flushable"] = "flush";
o_map["Writer"] = "append#flush#write";
o_map["PrintWriter"] = "append#checkError#clearError#close#flush#format#print#printf#println#setError#write";
o_map["PipedOutputStream"] = "flush#write";
o_map["ObjectOutputStream"] = "annotateClass#annotateProxyClass#close#defaultWriteObject#drain#enableReplaceObject#flush#putFields#replaceObject#reset#useProtocolVersion#write#writeBoolean#writeByte#writeBytes#writeChar#writeChars#writeClassDescriptor#writeDouble#writeFields#writeFloat#writeInt#writeLong#writeObject#writeObjectOverride#writeShort#writeStreamHeader#writeUnshared#writeUTF";
o_map["PrintStream"] = "append#checkError#clearError#close#flush#format#print#printf#println#setError#write";
o_map["BufferedWriter"] = "flush#newLine#write#append";
o_map["FileOutputStream"] = "flush#write";
o_map["BufferedOutputStream"] = "flush#write";
o_map["DataOutputStream"] = "flush#write#writeBoolean#writeByte#writeBytes#writeChar#writeChars#writeDouble#writeFloat#writeInt#writeLong#writeShort#writeUTF";
o_map["OutputStream"] = "flush#write";
o_map["Externalizable"] = "writeExternal";
o_map["FileSystem"] = "delete#rename";
o_map["StringWriter"] = "append#flush#write";
o_map["ObjectOutput"] = "flush#write#writeObject#writeBoolean#writeByte#writeBytes#writeChar#writeChars#writeDouble#writeFloat#writeInt#writeLong#writeShort#writeUTF";
o_map["ByteArrayOutputStream"] = "reset#write#writeTo#flush";
o_map["OutputStreamWriter"] = "flush#write#append";
o_map["DataOutput"] = "write#writeBoolean#writeByte#writeBytes#writeChar#writeChars#writeDouble#writeFloat#writeInt#writeLong#writeShort#writeUTF";
o_map["RandomAccessFile"] = "setLength#write#writeBoolean#writeByte#writeBytes#writeChar#writeChars#writeDouble#writeFloat#writeInt#writeLong#writeShort#writeUTF";
o_map["File"] = "createNewFile#delete#deleteOnExit#mkdir#mkdirs";
o_map["FileWriter"] = "flush#write#append";
o_map["FilterOutputStream"] = "flush#write";
o_map["PipedWriter"] = "flush#write#append";
####################
i_map_static["File"] = "createTempFile";
####################
io_kind_map["File"] = "FileInputStream#FileReader#RandomAccessFile#FileOutputStreamFileSystem#File#FileWriter";
io_kind_map["Console"] = "System.in#System.out#System.err#Console";
# Everything else has kind "Bus"
####################


io_isInList := function (target: string, list: string): bool {
	arr := safeSplit(list, "#");
	foreach(i: int; def(arr[i])) {
		if (arr[i] == target) return true;
	}
	return false;
};

io_getActualEffect := function(varType: string, methodName: string): string {
	list: string = INVALID_STR;

	if (def(i_map_static[varType])) {
		list = i_map_static[varType];
		if (io_isInList(methodName, list)) return IO_IN;
	}

	if (def(i_map[varType])) {
		list = i_map[varType];
		if (io_isInList(methodName, list)) return IO_IN;
	}

	if (def(o_map[varType])) {
		list = o_map[varType];
		if (io_isInList(methodName, list)) return IO_OUT;
	}

	return IO_NONE;
};

io_getTypeFromVARACCESS := function(source: Expression,
	declVars: map[string] of string,
	methodVars: map[string] of string,
	reflectionType: array of string) : string
{
	isThis: bool = false;

	if (len(source.expressions) == 1) {
		meta := source.expressions[0];
		if (meta.kind == ExpressionKind.LITERAL
			&& meta.literal == "this") isThis = true;
		else if (meta.kind == ExpressionKind.LITERAL ||
			     meta.kind == ExpressionKind.VARACCESS ||
			     meta.kind == ExpressionKind.METHODCALL)
		{
			return INVALID_STR; # don't know this source of our expression
		}
	}

	# full code string is the following expression:
	# (isThis ? "this." : "") + source.variable + "." + node.method

	reflectionType[0] = INVALID_STR;
	varType: string = INVALID_STR;
	if (isThis) {
		if (def(declVars[source.variable])) {
			varType = declVars[source.variable];
			ioOut["THIS"] << 1;
		}
	} else if (source.variable == "System.out" || source.variable == "System.err") {
		varType = "PrintWriter";
		reflectionType[0] = source.variable; # say it's System.*
		ioOut["SYSTEM"] << 1;
	} else if (source.variable == "System.in") {
		varType = "InputStream";
		reflectionType[0] = source.variable; # say it's System.*
		ioOut["SYSTEM"] << 1;
	} else if (def(methodVars[source.variable])){
		varType = methodVars[source.variable];
		ioOut["METHOD_VAR"] << 1;
	} else if (def(declVars[source.variable])) {
		varType = declVars[source.variable];
		ioOut["DECL_VAR"] << 1;
	}

	if (reflectionType[0] == INVALID_STR) {
		reflectionType[0] = varType;
	}

	return varType;
};

getEffectIO := function(method: Method, decl: Declaration, ioKind: array of bool, ioTypes: array of string): string {
	hasWriteIO: bool = false;
	hasReadIO: bool = false;

	ioKind[IO_HAS_CONSOLE] = false;
	ioKind[IO_HAS_FILE] = false;
	ioKind[IO_HAS_BUS] = false;

	# map[variable name] = variable type
	declVars: map[string] of string;
	methodVars: map[string] of string;

	# map[type name] = true
	ioReadEffects: map[string] of bool;
	ioWriteEffects: map[string] of bool;

	# have to declare this here or compiler fails
	var: Variable;

	foreach(i:int; def(decl.fields[i])) {
		var = decl.fields[i];
		declVars[var.name] = var.variable_type.name;
	}
	foreach(i:int; def(method.arguments[i])) {
		var = method.arguments[i];
		methodVars[var.name] = var.variable_type.name;
	}

	visit(method, visitor {
		before node: Expression -> {
			if (node.kind == ExpressionKind.METHODCALL && len(node.expressions) == 1) {
				source: Expression = node.expressions[0];

				if (source.kind == ExpressionKind.VARACCESS) {
					reflectionType: array of string;
					reflectionType = new(reflectionType, 1, INVALID_STR);

					varType: string = io_getTypeFromVARACCESS(source, declVars, methodVars, reflectionType);

					# now check figure out what the actual effect is
					if (varType != INVALID_STR) {
						effect: string = io_getActualEffect(varType, node.method);
						if (effect == IO_OUT) {
							hasWriteIO = true;
							ioWriteEffects[reflectionType[0]] = true;
						} else if (effect == IO_IN) {
							hasReadIO = true;
							ioReadEffects[reflectionType[0]] = true;
						}

						if (effect == IO_OUT) {
							# add the io type
							if (ioTypes[0] == "") {
								ioTypes[0] = reflectionType[0];
							} else {
								ioTypes[0] = format("%s,%s", ioTypes[0], reflectionType[0]);
							}
						}

					}
				}
			} else if (node.kind == ExpressionKind.VARDECL) {
				foreach(i:int; def(node.variable_decls[i])) {
					var = node.variable_decls[i];
					methodVars[var.name] = var.variable_type.name;
				}
			}
		}

		before node: Declaration -> stop;
	});

	# output input / output effects for aggregate stats
	ioReadList := keys(ioReadEffects);
	foreach (i: int; def(ioReadList[i])) {
		ioInput[ioReadList[i]] << 1;

		if (io_isInList(ioReadList[i], io_kind_map["Console"]))
			ioKind[IO_HAS_CONSOLE] = true;
		else if (io_isInList(ioReadList[i], io_kind_map["File"]))
			ioKind[IO_HAS_FILE] = true;
		else
			ioKind[IO_HAS_BUS] = true;
	}

	ioWriteList := keys(ioWriteEffects);
	foreach (i: int; def(ioWriteList[i])) {
		ioOutput[ioWriteList[i]] << 1;

		if (io_isInList(ioWriteList[i], io_kind_map["Console"]))
			ioKind[IO_HAS_CONSOLE] = true;
		else if (io_isInList(ioWriteList[i], io_kind_map["File"]))
			ioKind[IO_HAS_FILE] = true;
		else
			ioKind[IO_HAS_BUS] = true;
	}

	# make ioTypes a single comma if it's empty
	if (ioTypes[0] == "") {
		ioTypes[0] = ",";
	}

	if (hasWriteIO && hasReadIO) return IO_BOTH;
	else if (hasWriteIO) return IO_OUT;
	else if (hasReadIO) return IO_IN;
	return IO_NONE;
};


########################################
### Effect analysis functions ###
########################################
processOneMethod := function(method: Method, decl: Declaration, key: string) {
	finalStr: string = method.name;

	# argument types
	argStr: string = "";
	foreach(i: int; def(method.arguments[i])) {
		tName: string = method.arguments[i].variable_type.name;
		if (argStr == "") {
			argStr = tName;
		} else {
			argStr = format("%s,%s", argStr, tName);
		}
	}
	if (argStr == "")
		argStr = ",";
	finalStr = format("%s:%s", finalStr, argStr);

	# add the primary access modifier with the following precedence
	accessModifier: string = MOD_OTHER;
	if (isAbstract(method)) {
		accessModifier = MOD_ABSTRACT;
	} else if (isPrivate(method)) {
		accessModifier = MOD_PRIVATE;
	} else if (isStatic(method)) {
		accessModifier = MOD_STATIC;
	} else if (isConstructor(method)) {
		accessModifier = MOD_CTOR;
	}
	finalStr = format("%s:%s", finalStr, accessModifier);

	# io effect
	ioKind: array of bool;
	ioKind = new(ioKind, 3, false);
	ioTypes: array of string;
	ioTypes = new(ioTypes, 1, "");
	ioEffect: string = getEffectIO(method, decl, ioKind, ioTypes);
	finalStr = format("%s:%s", finalStr, ioEffect);

	# io kind
	if (ioKind[IO_HAS_CONSOLE])
		finalStr = format("%s:%s", finalStr, IO_KIND_CONSOLE);
	else if (ioKind[IO_HAS_FILE])
		finalStr = format("%s:%s", finalStr, IO_KIND_FILE);
	else
		finalStr = format("%s:%s", finalStr, IO_KIND_BUS);

	# io types -- IO_OUT only
	finalStr = format("%s:%s", finalStr, ioTypes[0]);

	# add the method for later processing after intra-project deduplication
	if (effects[key] == "") {
		effects[key] = finalStr;
	} else {
		effects[key] = format("%s#%s", effects[key], finalStr);
	}
};

processDecl := function(decl: Declaration, key: string) {
	# cache superclass if any
	supers[key] = INVALID_STR;
	foreach(i: int; def(decl.parents[i])) {
		if (decl.parents[i].kind == TypeKind.CLASS) {
			supers[key] = decl.parents[i].name;
			break;
		}
	}

	# process the methods
	effects[key] = "";
	foreach(i: int; def(decl.methods[i])) {
		processOneMethod(decl.methods[i], decl, key);
	}
};

# returns the overridden method info string if and only if it
# 1. exists
# 2. is not abstract, private, static, nor a constructor
# otherwise returns INVALID_STR
getOverridden := function(method: array of string, decl: string): string {
	argTypes: string = method[MDX_ARGTYPESTR];
	currDeclKey: string = resolve(supers[decl], decl);
	prevSeen: set of string;
	add(prevSeen, decl);

	while (currDeclKey != INVALID_STR
		&& !contains(prevSeen, currDeclKey)) {

		add(prevSeen, currDeclKey);

		if (effects[currDeclKey] == "") {
			# no methods to examine, go to next
			currDeclKey = resolve(supers[currDeclKey], currDeclKey);
			continue;
		}

		# for all methods
		methodList: array of string = splitall(effects[currDeclKey], "#");
		foreach(i: int; def(methodList[i])) {
			tempDat: array of string = splitall(methodList[i], ":");
			tempMethodName: string = tempDat[MDX_NAME];
			tempArgTypes: string = tempDat[MDX_ARGTYPESTR];
			tempIsValidForPair: bool = tempDat[MDX_PRIMARY_MODIFIER] == MOD_OTHER;

			# if method name and arguments match then return
			if (tempMethodName == method[MDX_NAME] && tempArgTypes == argTypes) {
				# overrides an abstract or similar method, so return no available overridden impl
				if (!tempIsValidForPair) {
					return INVALID_STR;
				} else {
					return methodList[i];
				}
			}
		}

		# no matching method, go to next
		currDeclKey = resolve(supers[currDeclKey], currDeclKey);
	}

	if (OUTPUT_SUPER_CYCLES &&
		currDeclKey != INVALID_STR && contains(prevSeen, currDeclKey)) {

		out << "ERROR: Superclass cycle " + p.name + "#" + method[MDX_NAME]
		        + "#" + decl + "#" + currDeclKey;
	}

	return INVALID_STR;
};

outputMethodResults := function(decl: string, mInfo: array of string) {
	# method is abstract, static, ctor, or private then skip it
	if (mInfo[MDX_PRIMARY_MODIFIER] != MOD_OTHER) {
		return;
	}

	superInfoFull: string = getOverridden(mInfo, decl);
	superInfo: array of string = splitall(superInfoFull, ":");

	# no valid supermethod
	if (superInfoFull == INVALID_STR) {
		return;
	}

	stat["METHOD_PAIR_COUNT"] << 1;

	# no overriden abstract methods or pairs w/o any explicit effects
	if (mInfo[MDX_IO_EFFECT] == IO_NONE && superInfo[MDX_IO_EFFECT] == IO_NONE) {
		return;
	}

	stat["METHOD_PAIR_WITH_EFFECT_COUNTER"] << 1;

	infoActualEffect: string = mInfo[MDX_IO_EFFECT];

	overEffectLen: int = 0;
	infoEffectLen: int = 0;

	if (superInfo[MDX_IO_EFFECT] == IO_NONE) {}
	else if (superInfo[MDX_IO_EFFECT] == IO_BOTH) overEffectLen = 2;
	else overEffectLen = 1;

	if (infoActualEffect == IO_NONE) {}
	else if (infoActualEffect == IO_BOTH) infoEffectLen = 2;
	else infoEffectLen = 1;

	diffInfo: string = "!y";
	if (infoActualEffect == superInfo[MDX_IO_EFFECT]) {
		diffInfo = "!n";
	} else if (infoEffectLen > overEffectLen) {
		diffInfo = "!subhasmore";
	} else if (infoEffectLen < overEffectLen) {
		diffInfo = "!sprhasmore";
	}

	ioKind: string = IO_KIND_BUS;
	if (mInfo[MDX_IOKIND] == IO_KIND_CONSOLE || mInfo[MDX_IOKIND] == IO_KIND_CONSOLE)
		ioKind = IO_KIND_CONSOLE;
	else if (mInfo[MDX_IOKIND] == IO_KIND_FILE || mInfo[MDX_IOKIND] == IO_KIND_FILE)
		ioKind = IO_KIND_FILE;

	if (OUTPUT_PAIR_INFO)
		out << p.name + "#"
		     + mInfo[MDX_NAME] + "#"
		     + declNme[decl] + "#"
		     + superInfo[MDX_IO_EFFECT] + "#"
		     + infoActualEffect + "#"
		     + diffInfo + "#"
		     + ioKind;
};

outputMethodStats := function(mInfo: array of string) {
	stat["METHOD_COUNT"] << 1;

	if (mInfo[MDX_PRIMARY_MODIFIER] == MOD_ABSTRACT) {
		return;
	}

	ioEffect: string = mInfo[MDX_IO_EFFECT];
	# statistics for the method
	stat["IO_" + ioEffect] << 1;

	if (mInfo[MDX_PRIMARY_MODIFIER] == MOD_PRIVATE) {
		stat["IO_" + ioEffect + ";PRIVATE"] << 1;
	} else if (mInfo[MDX_PRIMARY_MODIFIER] == MOD_STATIC) {
		stat["IO_" + ioEffect + ";STATIC"] << 1;
	} else if (mInfo[MDX_PRIMARY_MODIFIER] == MOD_CTOR) {
		stat["IO_" + ioEffect + ";CTOR"] << 1;
	} else {
		stat["IO_" + ioEffect + ";OTHER"] << 1;
	}

	# io type output
	if (mInfo[MDX_IO_OUT_TYPES] != ",") {
		allTypes: array of string = splitall(mInfo[MDX_IO_OUT_TYPES], ",");
		foreach (i: int; def(allTypes[i])) {
			stat["IO_METHODS_USING_OUTPUT_TYPE_" + allTypes[i]] << 1;
		}
	}

	stat["NON_ABSTRACT_METHOD_COUNT"] << 1;
};

outputResults := function() {
	# also same for 'effects'
	types: array of string = keys(declPkg);

	foreach(i: int; def(types[i])) {
		curr: string = types[i];

		# if type is not duplicated, output results for each method
		if (declPkg[curr] != HAS_DUPES_STR) {
			stat["CLASS_COUNT"] << 1;

			methods: array of string = safeSplit(effects[curr], "#");
			foreach(j: int; def(methods[j])) {
				mInfo: array of string = splitall(methods[j], ":");
				outputMethodStats(mInfo);
				outputMethodResults(curr, mInfo);
			}
		}
	}
};


########################################
### Resolution startup ###
########################################
produce := function(snapshot: array of ChangedFile, filterOutList: array of bool) {
	file: ChangedFile;

	numOut: int = 0; # current size of outers
	OUTER_LEN: int = 3; # hard limit of "outer1.outer2.class"
	outers: array of string;
	outers = new(outers, OUTER_LEN, "");

	prodVisit := visitor {
		before decl: Declaration -> {
			if (decl.kind == TypeKind.CLASS) {
				resolvOut["DECLARATION"] << 1;

				currOut: string = "";
				for(i: int = 0; i < numOut && i < OUTER_LEN; i++)
					currOut = currOut + "." + outers[i];

				key: string = preprocessDecl(decl, getast(file), currOut);
				if (key != INVALID_STR) processDecl(decl, key);
			}

			numOut++;
			if (numOut <= OUTER_LEN) {
				outers[numOut - 1] = decl.name;
			}
		}

		after node: Declaration -> numOut--;

		# don't look at declarations in a method
		before node: Method -> stop;
	};
	foreach(i: int; def(snapshot[i])) {
		file = snapshot[i];

		if (filterOutList[i])
			continue;

		visit(snapshot[i], prodVisit);

		if (numOut != 0) {
			resolvOut["OUTER_NONZERO (bug?)"] << 1;
			numOut = 0;
		}
	}
};


########################################
### Startup ###
########################################
countNodes := function (snapshot: array of ChangedFile) {
	currentNodeCountAST: int = 0;
	counterAST := visitor {
		before _ -> currentNodeCountAST++;
	};
	foreach(i:int; def(snapshot[i])) {
		visit(snapshot[i], counterAST);
	}
	stat["PROJECT_LATEST_TOTAL_AST_NODES"] << currentNodeCountAST;
};

# All repositories are Java code repositories. <=1 per project on GitHub
revisionVisitor := visitor {
	before node: CodeRepository -> {
		stat["CODE_REPOSITORY_COUNT"] << 1;

		clear(declImp);
		clear(declPkg);
		clear(declNme);

		clear(effects);
		clear(supers);

		#clear(statics);

		snapshot := getsnapshot_mp(node, now());
		filterOutList: array of bool;
		filterOutList = new(filterOutList, len(snapshot), false);

		stat["CONSIDERED_SOURCE_FILES"] << len(snapshot);

		# set up statics for throws analysis, check for JUnit prescence
		foreach (i: int; def(snapshot[i])) {
			root := getast(snapshot[i]);

			if (fileIsFilteredOut(root))
				filterOutList[i] = true;
			#else
			#	visit(root, staticMethodVisitor);
		}

		# set up rest of the structures (for resolv and app)
		produce(snapshot, filterOutList);

		# count number of AST nodes
		countNodes(snapshot);
	}
};

visit(p, revisionVisitor);
outputResults();